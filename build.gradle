buildscript {
    repositories {
        mavenCentral()
        //Needed only for SNAPSHOT versions
        //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

plugins {
    id "org.sonarqube" version "2.5"
}

apply plugin: 'java'
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

plugins {
    id "org.sonarqube" version "2.5"
}

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

group = 'com.saptarshidebnath.utilities'
archivesBaseName = 'ProcessRunner'
version = '0.0.3.0'

sourceCompatibility = 1.8
targetCompatibility = 1.8

//
// To handle travis requirement
//
// https://stackoverflow.com/a/26104997
//
def uzer = hasProperty('ossrhUsername') ? ossrhUsername : ""
def creds = hasProperty('ossrhPassword') ? ossrhPassword : ""

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '2.0.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version: '1.3'
    testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'
}

tasks.withType(Test) {
    testLogging {
        events TestLogEvent.FAILED
        exceptionFormat TestExceptionFormat.FULL
        showCauses true
        showExceptions true
        showStackTraces true
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar, sourceJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: uzer, password: creds)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: uzer, password: creds)
            }

            pom.project {
                name(name)
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Process Runner is java based library using which one can execute system process ' +
                        'or scripts [shell scripts, batch file, python scripts, ruby scripts etc] from ' +
                        'inside your java program.'
                url 'http://code.saptarshidebnath.com/processrunner/'
                scm {
                    connection 'scm:git:git@github.com:saptarshidebnath/processrunner.git'
                    developerConnection 'scm:git:git@github.com:saptarshidebnath/processrunner.git'
                    url 'https://github.com/saptarshidebnath/processrunner'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/saptarshidebnath/processrunner/blob/master/LICENSE.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'saptarshi.devnath'
                        name 'Saptarshi Debnath'
                        email 'saptarshi.devnath@gmail.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    numberOfRetries = 20
    delayBetweenRetriesInMillis = 3000
}

//
// For uploading to nexus and releasing
//
// Built from the tutorial http://jedicoder.blogspot.com/2011/11/automated-gradle-project-deployment-to.html
//
//
// https://github.com/Codearte/gradle-nexus-staging-plugin/
//
//

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled true
        html.destination "${buildDir}/reports/coverage"
    }
}

check.dependsOn jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "Process Runner is java based library using which one can execute system process or scripts from inside your java program."
        property "sonar.projectKey", "com.saptarshidebnath.utilities:ProcessRunner"
    }
}